# -*- coding: utf-8 -*-
"""Testing modules."""

from config import _make_path, VALID_YEARS
from rows import dequote, okved3, EMPTY
from rows import Dataset, slice_columns, make_tuples, emit_rows
from rows import RENAMER, COLUMNS, K, TEXT_COLUMNS

#
#   config.py 
#

def test_config():
    assert "data\\csv\\123.csv" == _make_path("123.csv", "csv") 
    
#
#   rows.py 
#

def test_okved():  
    tests = { "1": [1, EMPTY, EMPTY]
           , "01": [1, EMPTY, EMPTY]
        , "44.20": [44,   20, EMPTY]
      , "1.10.11": [1,    10,    11]}
    for k, v in tests.items():
        assert okved3(k) == v            
        
def test_dequote():
    tests = {'Открытое акционерное общество "База отдыха "Энергетик"': ('Открытое акционерное общество', 'База отдыха "Энергетик"')
           , 'Общество с ограниченной ответственностью "РИОНИ"': ('Общество с ограниченной ответственностью', 'РИОНИ')
           , 'МУНИЦИПАЛЬНОЕ УНИТАРНОЕ ПРЕДПРИЯТИЕ "ТЕХНО-ТОРГОВЫЙ ЦЕНТР "РЕМБЫТТЕХНИКА" МУНИЦИПАЛЬНОГО ОБРАЗОВАНИЯ "ГОРОД АРХАНГЕЛЬСК"': 
           ('МУНИЦИПАЛЬНОЕ УНИТАРНОЕ ПРЕДПРИЯТИЕ', 'ТЕХНО-ТОРГОВЫЙ ЦЕНТР "РЕМБЫТТЕХНИКА" МУНИЦИПАЛЬНОГО ОБРАЗОВАНИЯ "ГОРОД АРХАНГЕЛЬСК"')
           }
    for k, v in tests.items():
        assert dequote(k) == v  

def test_columns_in_dataset():
    _, d = slice_columns(make_tuples(COLUMNS))        
    assert len(d) == len(RENAMER)
    assert COLUMNS[:K]==TEXT_COLUMNS
    #assert next(emit_rows(2013)) == ['2013', '20140617', '93', '04', '0', 'Общество с ограниченной ответственностью', 'СОК "Эдельвейс"', '24', '2454021005', '67645404', '0', '16', 20, 94, 20, 94, 1087, 1152, 1106, 1246, 889, 746, 0, 0, 0, 0, 0, 0, 216, 500, 1106, 1246, 13027, 8511, 291, 1258, 0, 0, 220, 1197, 0, 0, 0, 0, 0, 0, 0, 0] 
    #assert next(islice(emit_rows(2014),55,56)) == ['2014', '20150706', '52', '11', '2', 'Товарищество на вере', 'Мялкин и компания', '52', '5231002660', '43012350', '11064', '16', 55, 59, 55, 331, 2662, 2990, 2717, 3321, 2528, 2130, 0, 0, 0, 0, 0, 0, 189, 1191, 2717, 3321, 8274, 5506, 0, 36, 0, 0, -56, -17, 0, 0, 0, 0, 0, 0, 0, 0]

def test_emitters():
    assert next(emit_rows(2015)) == ['2015', '20160624', 28, 11, 0, 'Открытое акционерное общество', 'Энерготехмаш',
                                     '34', '3435900517', '00110467', '10000', '16', 23616, 27492, 47666, 42114, 124323, 
                                     347639, 171989, 389753, -250123, -32497, 223076, 223076, 227579, 233014, 33574, 
                                     4806, 194533, 189236, 171989, 389753, 39311, 335342, -49052, -30226, 29000, 
                                     25572, -229430, -62270, 26572, 16333, 3123, 23721, 0, 0, 0, 0]
    assert next(emit_rows(2015)) == next(emit_rows(2015, ['3435900517']))
                                     
# LINE1_2013_PARSED = [2013, '20140617', 'Общество с ограниченной ответственностью', 'СОК "Эдельвейс"', '24', 93, 4, 0, '67645404', '0', '16', '93.04', '2454021005', '384', '1', 0, 0, 0, 0, 0, 0, 0, 0, 20, 94, 0, 0, 0, 0, 0, 0, 0, 0, 20, 94, 161, 64, 0, 0, 467, 876, 0, 0, 459, 212, 0, 0, 1087, 1152, 1106, 1246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 889, 746, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 500, 0, 0, 0, 0, 0, 0, 216, 500, 1106, 1246, 13027, 8511, 12736, 7253, 291, 1258, 0, 0, 0, 0, 291, 1258, 0, 0, 0, 0, 0, 0, 0, 0, 71, 61, 220, 1197, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 220, 1196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
# LINE1_2013_RAW = ['Открытое акционерное общество "Российское акционерное общество по производству цветных и драгоценных металлов "Норильский никель"', '00002565', '12247', '16', '65.23.1', '2457009983', '384', '2', '150', '150', '0', '0', '0', '0', '0', '0', '21', '56', '0', '0', '3129154', '3129154', '35332', '18558', '0', '0', '3164657', '3147918', '23', '23', '0', '0', '3728', '1951', '2970548', '2900387', '31526', '13763', '0', '0', '3005825', '2916124', '6170482', '6064042', '47250', '47250', '0', '0', '0', '0', '2266991', '2266991', '7087', '7087', '3848006', '3741048', '6169334', '6062376', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '226', '360', '0', '0', '922', '1306', '0', '0', '1148', '1666', '6170482', '6064042', '2245363', '2951506', '2100227', '2770211', '145136', '181295', '0', '0', '31315', '52939', '113821', '128356', '13748', '29792', '5230', '1364', '0', '0', '42', '58', '3508', '12216', '129333', '147354', '40038', '27104', '-18723', '-18867', '0', '0', '32894', '16500', '15231', '14258', '106958', '122492', '0', '0', '0', '0', '106958', '122492', '47250', '0', '2266991', '7087', '3741048', '6062376', '0', '0', '0', '0', '106958', '106958', '106958', '106958', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '47250', '0', '2266991', '7087', '3848006', '6169334', '6169334', '3062376', '2249685', '0', '57', '0', '2249628', '2245685', '8132', '20362', '0', '154', '2217037', '4000', '13748', '0', '0', '0', '13748', '0', '0', '0', '0', '0', '0', '0', '13748', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '17748', '15', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']

# def test_row_parser():
    # assert LINE1_2013_PARSED = adjust_row(LINE1_2013_RAW, 2013)
    
# #
# #   reader.py 
# #

# def test_reader():
    # assert Dataset(2013).peep(skip=0) == LINE1_2013_PARSED   
    
# def test_small_sample():
    # from config import TEST_RAW_CSV 
    # spec = dict(year='2015',
                # inc=TEST_RAW_CSV, 
                # out=from_test_folder("brushed_csv_test.csv"),
                # df=from_test_folder("df_test.csv")
                # )
    # ds = Dataset(custom_spec=spec)
    # assert 1 = ds.create_clean_copy(True)
    # ds.make_df()
    # ds.peek()
    # ds.demo()
    # df = ds.read_df()